{"name":"Iron mq haskell","tagline":"IronMQ haskell client","body":"Haskell language binding for IronMQ. [IronMQ](http://www.iron.io/products/mq) is an elastic message queue for managing data and event flow within cloud applications and between systems. [See How It Works](http://www.iron.io/products/mq/how)\r\n\r\n# Getting Started\r\n\r\n## Get credentials\r\n\r\nTo start using iron_mq_python, you need to sign up and get an OAuth2 token.\r\n\r\n1. Go to http://iron.io/ and sign up.\r\n2. Get an OAuth2 Token at http://hud.iron.io/tokens\r\n\r\n## Install iron_mq_haskell\r\n\r\n```sh\r\ncabal install iron-mq\r\n```\r\n## Configure\r\n\r\nCreate a client which stores your authentication information and server settings/\r\n\r\n```haskell\r\nclient = Client {\r\n    server = \"mq-aws-us-east-1.iron.io\",\r\n    porjectID = \"500f7b....b0f302e9\",\r\n    token = \"Et1En7.....0LuW39Q\",\r\n    api_version=\"1\"\r\n}\r\n```\r\n\r\n## The Basics\r\n\r\n### Listing queues\r\n\r\n```haskell\r\nqueues :: Client -> QueueSummary\r\nqueues client\r\n```\r\nreturns list of queue names available to the client.\r\n\r\nwe get a specific queue by name:\r\n\r\n```haskell\r\ngetQueue :: Client -> QueueName -> IO Queue\r\nmyQueue = getQueue client \"test_queue\"\r\n```\r\n\r\n### Push messages on the queue\r\n\r\nWe can change the default options of a message like so:\r\n\r\n```haskell\r\npostMessages :: Client -> QueueName -> [Message] -> IO IronResponse\r\npostMessages client \"queueName\" [message {body = \"message1\"}, message {body = \"message2\"}]\r\n```\r\n\r\nWe can change the default settings for a message like so:\r\n\r\n```haskell\r\nunorthoDoxMessage = message {\r\n    body = \"axxon body\",\r\n    timeout = 120 -- Timeout, in seconds. After timeout, item will be placed back on queue. Defaults to 60.\r\n    delay = 5 -- The item will not be available on the queue until this many seconds have passed. Defaults to 0.\r\n    expiresIn = 2*24*3600 -- How long, in seconds, to keep the item on the queue before it is deleted.\r\n}\r\n\r\nmain = postMessage \"queueName\" [unorthodoxMessage]\r\n```\r\n\r\n### Pop messages off the queue\r\n\r\n```haskell\r\ngetMessages :: Client -> QueueName -> IO MessageList\r\ngetMessages client \"queneName\"\r\n{- \r\nMessageList \r\n    {\r\n        messages = [Message {mId = Just \"...\", mBody = \"Word up!\", mTimeout = Just 60, mReservedCount = Just 1}]\r\n    }\r\n-}\r\n```\r\n\r\nSet max to the number of messages to return, 1 by default. A `timeout` parameter can be used to specify a per-message timeout, or the timeout the message was posted with will be used.\r\n\r\nWhen you pop/get a message from the queue, it will NOT be deleted.\r\nIt will eventually go back onto the queue after a timeout if you don't delete it (default timeout is 60 seconds).\r\n\r\n### Get message by id\r\n```haskell\r\ngetMessageByID :: Client -> QueueName -> ID -> IO Message\r\nmain = getMessageById client \"test_queue\" \"1234567789abcdef\"\r\n{-\r\n    Message {mId = Just \"...\", mBody = \"Hey yo!\", mTimeout = Just 60, mReservedCount = Just 1}\r\n-}\r\n```\r\n\r\n### Delete messages from the queue\r\n\r\n```haskell\r\ndeleteMessages :: Client -> QueueName -> [ID] -> IO IronResponse\r\ndeleteMessages client \"test_queue\" [\"123456789abcdef\", \"fedcba987654321\"]\r\n```\r\n\r\n### Clear a queue\r\n\r\n```haskell\r\nclear :: Client -> QueueName -> IO IronResponse\r\nclear client \"test_queue\"\r\n```\r\n\r\n### Get queue ***size***, ***id***, ***total_messages*** and whole ***info***\r\n```haskell\r\nmain = do\r\n-- | getQueue client queueName\r\nmyQueue <-  getQueue client queueName\r\n{-\r\nQueue {\r\n    qId = Just \"541451a958a847405bfa6316\",\r\n    qProjectId = \"53f691bd45d4960005000082\",\r\n    qName = \"test_queue\",\r\n    qSize = Just 1,\r\n    qTotalMessages = Just 8,\r\n    qSubscribers = Nothing,\r\n    qRetries = Nothing,\r\n    qPushType = Nothing,\r\n    qRetriesDelay = Nothing\r\n}\r\n-}\r\n\r\n-- | qSize queue\r\nqSize myQueue -- Just 1\r\n\r\n-- | qName queue\r\nqName myQueue -- \"test_queue\"\r\n\r\n-- | qTotalMessages queue\r\nqTotalMessages -- Just 8\r\n\r\n-- | qID queue\r\nqID myQueue -- \"541451a958a847405bfa6316\"\r\n```\r\n\r\n### Peek at messages\r\n\r\nTo view messages without reserving them, use peek:\r\n\r\n```haskell\r\npeek :: Client -> QueueName -> Int -> IO MessageList\r\npeek client \"test_queue\" 10\r\n{-\r\n    MessageList {messages = [Message {mId = Just \"...\", mBody = \"Word up!\", mTimeout = Just 60, mReservedCount = Just 1}]}\r\n-}\r\n```\r\n\r\nThe third parameter is an integer specifying the maximum number of messages to retrieve.\r\n\r\n### Touch a message\r\n\r\nTo extend the reservation on a reserved message, use touch. The message reservation will be extended by the message's `timeout`.\r\n\r\n```haskell\r\ntouch :: Client -> QueueName -> ID -> IO IronResponse\r\ntouch client \"test_queue\" messageID\r\n```\r\n\r\n### Release a reserved message\r\n\r\nTo release a message that is currently reserved, use release:\r\n\r\n```haskell\r\nrelease :: Client -> QueueName -> ID -> Int -> IO IronResponse\r\nrelease client \"test_queue\" \"123456789abcdef\" 120 -- message will be released after delay seconds\r\n```\r\n\r\nThe last parameter is the delay time before the message is released.\r\n\r\n### Delete a queue\r\n\r\nTo delete a queue, use `deleteQueue`:\r\n\r\n```haskell\r\n-- | deleteQueue client queueName\r\ndeleteQueue client \"test_queue\"\r\n```\r\n\r\n## Push Queues\r\n\r\n### Update Queue Information\r\n\r\nTo update the queue's push type and subscribers, use update:\r\n\r\n```haskell\r\nupdate :: Client -> QueueName -> [Subscriber] -> String -> IO Response\r\nupdate client \"test_queue\" [subscriber {url = \"http://endpoint1.com\"}, subscriber {url = \"https://end.point.com/2\"}] \"unicast\"\r\n```\r\n\r\nThe last parameter is the broadcast type (either \"unicast\" or \"multicast\")\r\n\r\n### Add subscribers to a push queue\r\n\r\n```haskell\r\naddSubscribers :: Client -> QueueName -> [Subscriber] -> IO IRonResponse\r\naddSubscribers client test_queue [subscriber {url = \"http://endpoint1.com\"}, subscriber {url = \"https://end.point.com/2\"}])\r\n```\r\n\r\n### Remove subscribers from a push queue\r\n\r\n```haskell\r\nremoveSubscribers :: Client -> QueueName -> [Subscriber]\r\nmain = removeSubscribers client \"test_queue\" [subscriber {url = \"http://endpoint1.com\"}, subscriber {url =\"https://end.point.com/2\"})\r\n```\r\n\r\n### Get the push statuses of a message\r\n\r\n```haskell\r\ngetMessagePushStatuses :: Client -> QueueName -> ID -> IO SubscriberList\r\ngetMessagePushStatuses client \"test_queue\" \"123456789abcdef\"\r\n{-\r\n    subscriberList {\r\n    subscribers = [Subscriber {retriesDelay = Just 60, retriesRemaining\" = Just 2, statusCode = Just 200, status = Just \"deleted\", \"url\": \"http://endpoint1.com\", \"id\": \"52..\"}, ...]}\r\n-}\r\n```\r\n\r\n### Delete a pushed message\r\n\r\nIf you respond with a 202 status code, the pushed message will be reserved, not deleted, and should be manually deleted. You can get the message ID and subscriber ID from the push message's headers.\r\n\r\n```haskell\r\ndeleteMessagePushStatus :: Client -> QueueName -> MessageID -> [SuscriberID] -> IO IronResponse\r\nmain = deleteMessagePushStatus client \"test_queue\" \"123456789abcdef\" \"987654321fedcba\"\r\n```\r\n\r\n## Pull queues\r\n\r\n### Add alerts to a queue\r\n\r\n```haskell\r\nfixed_desc_alert = alert {type = \"fixed\", direction = \"desc\", trigger = 1000}\r\nprogressive_asc_alert = alert {type = \"progressive\", direction = \"asc\", trigger= 10000}\r\naddAlerts :: Client -> QueueName -> [Alert] -> IO IronResponse\r\naddAlerts client \"test_queue\" ([fixed_desc_alert, progressive_asc_alert])\r\n```\r\n\r\n### Update alerts in a queue\r\n\r\n```haskell\r\nprogressive_asc_alert = alert {type = \"progressive\", direction = \"asc\", trigger = 5000, queue = \"q\"}\r\nupdateAlerts :: Client -> QueueName -> [Alert] -> IO IronResponse\r\nupdateAlerts client \"test_queue\" ([progressive_asc_alert])\r\n```\r\n\r\n### Remove alerts from a queue\r\n\r\n```haskell\r\nremoveAlerts :: Client -> QueueName -> [AlertID] -> IO IronResponse\r\nmain = removeAlerts client \"test_queue\" (['5305d3b5a3e920763013c796', '513015d32b5a3e763013c796'])\r\n```\r\n\r\n# Full Documentation\r\n\r\nYou can find more documentation here:\r\n\r\n* http://iron.io\r\n* http://dev.iron.io","google":"UA-58014290-1","note":"Don't delete this file! It's used internally to help with page regeneration."}